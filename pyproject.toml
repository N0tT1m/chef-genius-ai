[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "chef-genius"
version = "1.0.0"
description = "AI-powered cooking assistant with ML-driven recipe recommendations, ingredient substitutions, and meal planning"
authors = [
    {name = "ChefGenius Team"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
keywords = ["ai", "ml", "cooking", "recipes", "food", "nutrition"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core AI and ML
    "torch>=2.7.1",
    "transformers>=4.30.0",
    "datasets>=2.12.0",
    "accelerate>=0.20.0",
    "tokenizers>=0.13.0",
    "tqdm>=4.65.0",
    "huggingface-hub>=0.16.0",
    "sentence-transformers>=2.2.0",
    
    # Backend Framework
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",
    "pydantic>=2.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.11.0",
    
    # Database
    "psycopg2-binary>=2.9.0",
    "pymongo>=4.4.0",
    "redis>=4.6.0",
    
    # Search and Indexing
    "elasticsearch>=8.8.0",
    
    # Computer Vision
    "opencv-python>=4.8.0",
    "Pillow>=10.0.0",
    "ultralytics>=8.0.0",
    
    # NLP Processing
    "spacy>=3.6.0",
    "nltk>=3.8.0",
    
    # Data Processing
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    
    # API and HTTP
    "httpx>=0.24.0",
    "requests>=2.31.0",
    
    # Authentication and Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # Task Queue
    "celery[redis]>=5.3.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
    "pydantic-settings>=2.0.0",
    
    # CLI
    "click>=8.1.0",
    "rich>=13.4.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
    "isort>=5.12.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]

mlops = [
    "mlflow>=2.5.0",
    "ray[default]>=2.5.0",
    "wandb>=0.15.0",
    "tensorboard>=2.13.0",
]

[project.scripts]
chef-genius = "cli.main:app"

[project.urls]
Homepage = "https://github.com/chef-genius/chef-genius"
Repository = "https://github.com/chef-genius/chef-genius"
Documentation = "https://chef-genius.readthedocs.io"
Issues = "https://github.com/chef-genius/chef-genius/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["backend*", "cli*"]
exclude = ["tests*", "frontend*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.json", "*.yaml", "*.yml"]

# Code formatting with Black
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | frontend
  | mlruns
)/
'''

# Import sorting with isort
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_glob = ["frontend/*", "mlruns/*"]

# Type checking with mypy
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "datasets.*",
    "elasticsearch.*",
    "pymongo.*",
    "cv2.*",
    "ultralytics.*",
    "spacy.*",
    "nltk.*",
    "mlflow.*",
    "ray.*",
]
ignore_missing_imports = true

# Testing with pytest
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ml: marks tests that require ML models",
]

[tool.coverage.run]
source = ["backend", "cli"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Security scanning with bandit
[tool.bandit]
exclude_dirs = ["tests", "frontend", "mlruns"]
skips = ["B101", "B601"]
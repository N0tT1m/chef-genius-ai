# ChefGenius TensorRT API Makefile for Windows

# Variables
BINARY_NAME=chef-genius-tensorrt-api.exe
VERSION?=1.0.0
LDFLAGS=-ldflags "-X main.Version=$(VERSION)"

# Build the application
build:
	@echo Building $(BINARY_NAME)...
	set CGO_ENABLED=1 && go build $(LDFLAGS) -o bin\$(BINARY_NAME) .
	@echo Build complete: bin\$(BINARY_NAME)

# Build for production (optimized)
build-prod:
	@echo Building $(BINARY_NAME) for production...
	set CGO_ENABLED=1 && set GOOS=windows && set GOARCH=amd64 && go build -a $(LDFLAGS) -o bin\$(BINARY_NAME) .
	@echo Production build complete: bin\$(BINARY_NAME)

# Run the application
run: build
	@echo Starting $(BINARY_NAME)...
	bin\$(BINARY_NAME)

# Install dependencies
deps:
	@echo Installing dependencies...
	go mod download
	go mod tidy

# Run tests
test:
	@echo Running tests...
	go test -v ./...

# Run benchmarks
benchmark:
	@echo Running benchmarks...
	go test -bench=. -benchmem ./...

# Performance test
perf-test: build
	@echo Running performance tests...
	start /B bin\$(BINARY_NAME)
	timeout /t 3 /nobreak > nul
	curl -X POST http://localhost:8080/api/v1/benchmark?iterations=100
	taskkill /IM $(BINARY_NAME) /F

# Clean build artifacts
clean:
	@echo Cleaning...
	if exist bin rmdir /s /q bin
	go clean

# Check TensorRT and CUDA installation
check-env:
	@echo Checking environment...
	@echo CUDA version:
	nvcc --version || echo CUDA not found
	@echo TensorRT check:
	python -c "import tensorrt; print('TensorRT OK')" || echo TensorRT not found
	@echo Go version:
	go version

# Format code
fmt:
	@echo Formatting code...
	go fmt ./...

# Generate code coverage
coverage:
	@echo Generating code coverage...
	go test -coverprofile=coverage.out ./...
	go tool cover -html=coverage.out -o coverage.html

# Load test with PowerShell
load-test: build
	@echo Load testing...
	start /B bin\$(BINARY_NAME)
	timeout /t 3 /nobreak > nul
	powershell -File loadtest.ps1
	taskkill /IM $(BINARY_NAME) /F

# Create deployment package
package: build-prod
	@echo Creating deployment package...
	if not exist dist mkdir dist
	copy bin\$(BINARY_NAME) dist\
	if exist configs xcopy configs dist\configs\ /E /I
	powershell Compress-Archive -Path dist\* -DestinationPath dist\$(BINARY_NAME)-$(VERSION).zip -Force
	@echo Package created: dist\$(BINARY_NAME)-$(VERSION).zip

# Help
help:
	@echo Available commands:
	@echo   build       - Build the application
	@echo   build-prod  - Build for production
	@echo   run         - Build and run the application
	@echo   deps        - Install dependencies
	@echo   test        - Run tests
	@echo   benchmark   - Run benchmarks
	@echo   perf-test   - Run performance tests
	@echo   clean       - Clean build artifacts
	@echo   check-env   - Check TensorRT/CUDA environment
	@echo   fmt         - Format code
	@echo   coverage    - Generate code coverage
	@echo   load-test   - Load test with PowerShell
	@echo   package     - Create deployment package
	@echo   help        - Show this help

.PHONY: build build-prod run deps test benchmark perf-test clean check-env fmt coverage load-test package help
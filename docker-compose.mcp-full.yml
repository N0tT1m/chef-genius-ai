version: '3.8'

services:
  # Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.21.0
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-transformers,text2vec-openai,generative-openai,ref2vec-centroid'
      CLUSTER_HOSTNAME: 'node1'
      TRANSFORMERS_INFERENCE_API: 'http://t2v-transformers:8080'
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - t2v-transformers

  # Transformers Inference Service
  t2v-transformers:
    image: semitechnologies/transformers-inference:sentence-transformers-all-MiniLM-L12-v2
    ports:
      - "8081:8080"
    environment:
      ENABLE_CUDA: '0'  # Set to '1' if you have CUDA available
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Recipe Generation MCP Server
  recipe-server:
    build:
      context: ./mcp_servers/recipe_server
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - MODEL_PATH=/models/recipe_generation
      - RAG_DB_PATH=/data/recipes.db
      - WEAVIATE_URL=http://weaviate:8080
      - MCP_SERVER_PORT=8001
      - DEVICE=cuda
    volumes:
      - ./models:/models:ro
      - ./cli/data:/data:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    depends_on:
      weaviate:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 16G

  # Knowledge Retrieval MCP Server
  knowledge-server:
    build:
      context: ./mcp_servers/knowledge_server
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - WEAVIATE_URL=http://weaviate:8080
      - RAG_DB_PATH=/data/recipes.db
      - MCP_SERVER_PORT=8002
    volumes:
      - ./cli/data:/data:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      weaviate:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 4G

  # Tool Integration MCP Server
  tool-server:
    build:
      context: ./mcp_servers/tool_server
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - NUTRITION_API_KEY=${NUTRITION_API_KEY:-}
      - VISION_MODEL_PATH=/models/vision
      - MCP_SERVER_PORT=8003
      - WEAVIATE_URL=http://weaviate:8080
    volumes:
      - ./models:/models:ro
      - ./cli/data:/data:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      weaviate:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Enhanced Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./chef_genius.db}
      - REDIS_URL=redis://redis:6379
      - MCP_RECIPE_SERVER_URL=http://recipe-server:8001
      - MCP_KNOWLEDGE_SERVER_URL=http://knowledge-server:8002
      - MCP_TOOL_SERVER_URL=http://tool-server:8003
      - WEAVIATE_URL=http://weaviate:8080
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./cli/data:/app/cli/data:ro
      - ./models:/app/models:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      recipe-server:
        condition: service_healthy
      knowledge-server:
        condition: service_healthy
      tool-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 8G

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 1G

  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    deploy:
      resources:
        limits:
          memory: 1G

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 512M

  # Load Balancer (for scaling)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          memory: 256M

volumes:
  weaviate_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16